package com.pages.quiz;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

import com.pch.quiz.utilities.AppConfigLoader;
import com.pch.quiz.utilities.CommonLib;
import com.pch.quiz.utilities.DateUtil;
import com.pch.quiz.utilities.RandomGenerator;
import org.junit.Assert;
import com.pchengineering.registrations.RegistrationRequestGenerator;
import com.pchengineering.registrations.RequestDefaultsOverride;

import net.serenitybdd.core.pages.PageObject;

/**
 * Contains page functions for the Quiz registration page
 * 
 * @author vsankar
 */
public class RegistrationPage extends PageObject {
	
	/**
	 * Instantiates a RegistrationPage.
	 *
	 * @param driver
	 */
	public RegistrationPage(WebDriver driver) {
		super(driver);
	}

	private final DateUtil dataUtilInstance = DateUtil.getInstance();
	private final By FirstName_txtbox = new By.ByCssSelector("input.required.first-name");
	private final By Continue_btn = new By.ByCssSelector("button#sub_btn");
	private final By title = By.name("title");
	private final By firstName = By.name("firstname");
	private final By lastName = By.name("lastname");
	private final By street = By.name("street");
	private final By city = By.name("city");
	private final By state = By.name("state");
	private final By zip = By.name("zip");
	private final By mob = By.cssSelector("select.reg-input.month");
	private final By dob = By.cssSelector("select.reg-input.day");
	private final By yob = By.cssSelector("select.reg-input.year");
	private final By nmob = By.name("month");
	private final By ndob = By.name("day");
	private final By nyob = By.name("year");
	private final By email = By.name("email");
	private final By confirmEmail = By.name("confirm-email");
	private final By password = By.name("password");
	private final By confirmPassword = By.name("confirm-password");
	private final By submit = By.id("sub_btn");
	private final By firstOptinCheckbox = By.id("optin1");
	private final By secondOptinCheckbox = By.id("optin2");
	private final By passwordSilveruser = By.id("PW");
	private final By cnfmpasswordSilveruser = By.id("CPW");
	private final By submitSilveruser = By.cssSelector("div.sub-btn");
	

	CommonLib comLib = new CommonLib();
	private HeaderAndUninavPage headerUninavPage;
	public static String userEmail;
	public static RegistrationRequestGenerator regGenerator;
	RequestDefaultsOverride defaultsOverride;
	public final static String userPassword = "Pch123";
	// Reg Form field values
	private final String validTitle = "Mr.";
	private final String validStreet = "101 Channel Drive";
	private final String validCity = "Port Washington";
	private final String validState = "New York";
	private final String validZip = "11050";
	public final String fstName = "Quiz";
	public final String lstName = "Auto";


	/**
	 * Verify if Registeration page loaded
	 *
	 */

	public void verifyIf_RegistrationPage_Loaded() {
		element(FirstName_txtbox).waitUntilVisible();
		element(Continue_btn).waitUntilVisible();
		Assert.assertEquals("Registration Page not loaded properly", getTitle(), "Register");
	}


	/**
	 * Register a user with all the required info and with the Optins.
	 *
	 * @return User Email
	 */
	public String registerUserWithOptins() {
		if (headerUninavPage.verifyRegister()) {
			headerUninavPage.clickRegister();
		}
		selectFromDropdown(element(title), validTitle);
		typeInto(element(firstName), fstName);
		typeInto(element(lastName), lstName);
		typeInto(element(street), validStreet);
		typeInto(element(city), validCity);
		selectFromDropdown(element(state), validState);
		typeInto(element(zip), validZip);
		selectFromDropdown(element(mob), dataUtilInstance.getCurrentDate("MMMM"));
		selectFromDropdown(element(dob), dataUtilInstance.getCurrentDate("dd"));
		selectFromDropdown(element(yob), dataUtilInstance.getYearWithOffset(-25, "YYYY"));
		userEmail = RandomGenerator.autoGeneratedEmail();
		typeInto(element(email), userEmail);
		typeInto(element(confirmEmail), userEmail);
		typeInto(element(password), userPassword);
		typeInto(element(confirmPassword), userPassword);
		clickOn(element(submit));
		headerUninavPage.verifySignout();
		return userEmail;
	}

	/**
	 * Register a user After Acq full path  with all the required info and with the Optins.
	 *
	 * @return User Email
	 */
	public String acqRregisterUserWithOptins() {
		selectFromDropdown(element(title), validTitle);
		typeInto(element(firstName), fstName);
		typeInto(element(lastName), lstName);
		typeInto(element(street), validStreet);
		typeInto(element(city), validCity);
		selectFromDropdown(element(state), validState);
		typeInto(element(zip), validZip);
		selectFromDropdown(element(nmob), dataUtilInstance.getCurrentDate("MMMM"));
		selectFromDropdown(element(ndob), dataUtilInstance.getCurrentDate("dd"));
		selectFromDropdown(element(nyob), dataUtilInstance.getYearWithOffset(-25, "YYYY"));
		userEmail = RandomGenerator.autoGeneratedEmail();
		typeInto(element(email), userEmail);
		typeInto(element(confirmEmail), userEmail);
		typeInto(element(password), userPassword);
		typeInto(element(confirmPassword), userPassword);
		clickOn(element(submit));
		return userEmail;
	}



	/**
	 * Register a user with all the required info and without the Optins.
	 * 
	 * @return User Email
	 */
	public String registerUserWithoutOptins() {
		if (headerUninavPage.verifyRegister()) {
			headerUninavPage.clickRegister();
		}
		selectFromDropdown(element(title), validTitle);
		typeInto(element(firstName), fstName);
		typeInto(element(lastName), lstName);
		typeInto(element(street), validStreet);
		typeInto(element(city), validCity);
		selectFromDropdown(element(state), validState);
		typeInto(element(zip), validZip);
		selectFromDropdown(element(mob), dataUtilInstance.getCurrentDate("MMMM"));
		selectFromDropdown(element(dob), dataUtilInstance.getCurrentDate("dd"));
		selectFromDropdown(element(yob), dataUtilInstance.getYearWithOffset(-15, "YYYY"));
		userEmail = RandomGenerator.autoGeneratedEmail();
		typeInto(element(email), userEmail);
		typeInto(element(confirmEmail), userEmail);
		String randomPassword = RandomGenerator.randomAlphabetic(8);
		typeInto(element(password), randomPassword);
		typeInto(element(confirmPassword), randomPassword);
		clickOn(element(firstOptinCheckbox));
		clickOn(element(secondOptinCheckbox));
		clickOn(element(submit));
		headerUninavPage.verifySignout();
		return userEmail;
	}

	/**
	 * Register a Fully Registration user from RF
	 * 
	 * @return Complete URL to login to the application
	 */
	public String registerFullyRegUserFromRF() {
		regGenerator = new RegistrationRequestGenerator();
		defaultsOverride = new RequestDefaultsOverride();
		defaultsOverride.setEmail(RandomGenerator.autoGeneratedEmail());
		defaultsOverride.setPassword(userPassword);
		defaultsOverride.setConfirmPassword(userPassword);
		defaultsOverride.setFirstName(RandomGenerator.randomAlphabetic(5));
		if (AppConfigLoader.env.equalsIgnoreCase("Qa")) {
			regGenerator.generateGoldUserInQA(defaultsOverride);
		} else {
			regGenerator.generateGoldUserInSTG(defaultsOverride);
		}
		return AppConfigLoader.getInstance().getEnvironmentProperty("AppUrl") + "?em=" + regGenerator.getEmail()
				+ "&gmt=" + regGenerator.getGmt();
	}

	/**
	 * Register a Mini Registration user from RF
	 * 
	 * 
	 * @return Complete URL to login to the application
	 */
	public String registerMiniRegUserFromRF() {
		regGenerator = new RegistrationRequestGenerator();
		defaultsOverride = new RequestDefaultsOverride();
		defaultsOverride.setEmail(RandomGenerator.autoGeneratedEmail());
		defaultsOverride.setPassword(userPassword);
		defaultsOverride.setConfirmPassword(userPassword);
		defaultsOverride.setFirstName(RandomGenerator.randomAlphabetic(5));
		if (AppConfigLoader.env.equalsIgnoreCase("Qa")) {
			regGenerator.generateMiniRegUserInQA(defaultsOverride);
		} else {
			regGenerator.generateMiniRegUserInSTG(defaultsOverride);
		}
		return AppConfigLoader.getInstance().getEnvironmentProperty("AppUrl") + "?em=" + regGenerator.getEmail()
				+ "&gmt=" + regGenerator.getGmt();
	}

	/**
	 * Register a Silver Registration user from RF
	 * 
	 * @return
	 * 
	 * @return Complete URL to login to the application
	 */
	public String registerSilverRegUserFromRF() {
		regGenerator = new RegistrationRequestGenerator();
		defaultsOverride = new RequestDefaultsOverride();
		defaultsOverride.setEmail(RandomGenerator.autoGeneratedEmail());
		defaultsOverride.setPassword(userPassword);
		defaultsOverride.setConfirmPassword(userPassword);
		defaultsOverride.setFirstName(RandomGenerator.randomAlphabetic(5));
		if (AppConfigLoader.env.equalsIgnoreCase("Qa")) {
			regGenerator.generateSilverUserInQA(defaultsOverride);
		} else {
			regGenerator.generateSilverUserInSTG(defaultsOverride);
		}
		return AppConfigLoader.getInstance().getEnvironmentProperty("AppUrl") + "?em=" + regGenerator.getEmail()
				+ "&gmt=" + regGenerator.getGmt();
	}

	/**
	 * Register a Social Registration user from RF
	 * 
	 * @return Complete URL to login to the application
	 */
	public String registerSocialUserFromRF() {
		regGenerator = new RegistrationRequestGenerator();
		defaultsOverride = new RequestDefaultsOverride();
		String email = RandomGenerator.autoGeneratedEmail();
		defaultsOverride.setPassword(userPassword);
		defaultsOverride.setConfirmPassword(userPassword);
		defaultsOverride.setFirstName(RandomGenerator.randomAlphabetic(5));
		if (AppConfigLoader.env.equalsIgnoreCase("Qa")) {
			regGenerator.generateFaceBookUserWithEmailInQA(RandomGenerator.randomNumeric(15), email, email);
		} else {
			regGenerator.generateFaceBookUserWithEmailInSTG(RandomGenerator.randomNumeric(15), email, email);
		}
		return AppConfigLoader.getInstance().getEnvironmentProperty("AppUrl") + "?em=" + regGenerator.getEmail()
				+ "&gmt=" + regGenerator.getGmt();
	}

	/**
	 * Complete the Mini Reg User
	 */
	public void completeMiniRegUser() {
		selectFromDropdown(element(title), validTitle);
		typeInto(element(firstName), fstName);
		typeInto(element(lastName), lstName);
		typeInto(element(street), validStreet);
		typeInto(element(city), validCity);
		selectFromDropdown(element(state), validState);
		typeInto(element(zip), validZip);
		selectFromDropdown(element(mob), dataUtilInstance.getCurrentDate("MMMM"));
		selectFromDropdown(element(dob), dataUtilInstance.getCurrentDate("dd"));
		selectFromDropdown(element(yob), dataUtilInstance.getYearWithOffset(-25, "YYYY"));
		clickOn(element(submit));
	}

	public String compelteSilverUser() {
		waitForRenderedElementsToBePresent(passwordSilveruser);
		typeInto(element(passwordSilveruser), userPassword);
		typeInto(element(cnfmpasswordSilveruser), userPassword);
		moveTo(submitSilveruser);
		try {
			clickOn(element(submitSilveruser).waitUntilClickable());
		} catch (Exception e) {
			comLib.jsClick(submitSilveruser);
		}
		headerUninavPage.verifySignout();
		return userEmail;
	}

	public void compelteSocialUser() {
		selectFromDropdown(element(title), validTitle);
		typeInto(element(firstName), fstName);
		typeInto(element(lastName), lstName);
		typeInto(element(street), validStreet);
		typeInto(element(city), validCity);
		selectFromDropdown(element(state), validState);
		typeInto(element(zip), validZip);
		selectFromDropdown(element(mob), dataUtilInstance.getCurrentDate("MMMM"));
		selectFromDropdown(element(dob), dataUtilInstance.getCurrentDate("dd"));
		selectFromDropdown(element(yob), dataUtilInstance.getYearWithOffset(-25, "YYYY"));
		typeInto(element(password), userPassword);
		typeInto(element(confirmPassword), userPassword);
		clickOn(element(submit));
		waitFor(5);
	}

	/**
	 * Return the last created user detail object from the RF. Helpful to get the
	 * user info like GMT & OAT..
	 * 
	 * @return
	 */
	public RegistrationRequestGenerator getLastCreatedRFUserDetails() {
		return regGenerator;
	}
}
